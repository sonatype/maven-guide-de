<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="archetypes">
  <title>Einsatz von Maven Archetypen</title>

  <warning>
    <para>Dieses Kapitel hat noch nicht einmal den Status "Entwurf" erreicht.
    Es ist lediglich eine grobe Skizze eines Kapitels. Wir haben uns dennoch
    dazu entschlossen derartige Kapitel zu veröffentlichen, da wir davon
    überzeugt sind, das die Transparenz für den Author wie auch den
    Leser/Benutzer eines Kapitels von Vorteil ist. Ein Buch stellt mehr dar
    als die blosen Seiten Papier (oder des Bildschirms) auf welchem es
    gedruckt ist, die wahre Bedeutung ist vielmehr die Gesamtheit des
    geschriebenen Wortes wie auch der Diskussion welche dieses auslöst.</para>

    <para>Da dieses Kapitel in einer so frühen Version besteht, bitten wir Sie
    davon abzusehen uns Rechtschreibfehler mit der normalen Akribie
    mitzuteilen. Wollen Sie uns wirklich helfen, so nennen Sie uns, was Sie
    von diesem Kapitel erwarten, was Sie hier lesen möchten. Sollten Sie, im
    Anschluss an die Lektüre dieses Kapitels erwarten dass wir X oder Y oder
    gar Z, so bitten wir Sie die zugehörige Satisfaction Seite anzusteuern,
    und uns einen Vorschlag oder eine idee zu unterbreiten. Wir sind an Ihren
    Ansichten interessiert.</para>

    <para>Erwarten sie nicht, dass dieses Kapitel für ewig im Skizzenstatus
    verharrt, wir sind wirklich nicht darauf aus Sie hier im Spannungsbogen
    hängen zu lassen - Abschnitte welche den Grossteil der notwendigen
    Informationen wiedergeben, aber das entscheidende Detail auslassen,
    Tabellen die hilfreich jedoch nicht vollständig sind, oder der essentielle
    Abschnitt, der nur flüchtig erstellt wurde. Wir versuchen uns hier an
    einer neuen Art des Schreibens: "Agiles schreiben". Wir haben versucht
    sicherzustellen immer komplette Abschnitte wiederzugeben. Obwohl die
    Aufzählung der Third Party Plugins unvollständig ist (und wohl immer
    bleiben wird) und das Kapitel noch eines Abschnittes bezüglich der
    Generierung von Archetypen bedarf, so haben wir diese Abschnitte dennoch
    freigegeben. </para>

    <para>Errwahrten Sei dne einenn oder adneren Felher in diesem Kapitle,
    (bitte noch nicht melden!)</para>

    <para>Montag, 13 Oktober 2008 - Tim O'Brien.</para>
  </warning>

  <section id="archetype-sect-intro">
    <title>Einführung in Maven Archetypen</title>

    <para>Ein Archetyp ist eine Vorlage eines Maven Projektes welche vom Maven
    Archetyp Plugin benutzt wird, um ein neues Projekt zu erstellen.
    Archetypen sind für insbesondere für Open Source Projekte von Bedeutung;
    Projekte wie zum Beispiel Apache Wicket oder Apache Cocoon, wobei das
    Projekt dem Endbenutzer eine Anzahl von Ausgangspunkten für Endanwendungen
    mit auf den Weg geben möchte. Archetypen sind ebenso von Interesse für
    Organisationen welche an einer Standardisierung über eine Anzahl
    gleichartiger, möglicherweise zusammenhängender Projekte erreichen
    möchten. Sollten Sie in einer Organisation arbeiten, welche grosse
    Entwicklungsteams unterhält welche an Projekten arbeiten die alle eine
    ähnliche Struktur aufweisen, so können auch Sie einen Archetypen
    veröffentlichen, welcher von allen Mitgliedern der Entwicklungsteams
    benutzt werden kann. Sie können dann ein neues Projekt erstellen, indem
    Sie den Archtetyp von der Kommandozeile oder auch aus Eclipse heraus
    mittles dem m2eclipse Plugin (vorgestellt in <xref linkend="eclipse" />)
    und dem Maven Archetyp Plugin anziehen.</para>
  </section>

  <section id="archetype-sect-using">
    <title>Einsatz von Archetypen</title>

    <para>Sie können einen Archtetypen benutzen, indem Sie diesen mittels dem
    Maven Archetyp Plugin von der Befehlszeile oder dem m2eclipse Plugin aus
    Eclipse heraus anziehen.</para>

    <section id="archetype-sect-using-cmd-line">
      <title>Einsatz eines Archetypen von der Befehlszeile</title>

      <para>Der folgende Aufruf auf der Befehlszeile kann benutzt werden, um
      ein Projekt aus dem Archetype quickstart zu generieren:</para>

      <screen>mvn archetype:generate \
  -DgroupId=org.sonatype.mavenbook \
  -DartifactId=quickstart \
  -Dversion=1.0-SNAPSHOT \
  -DpackageName=org.sonatype.mavenbook \
  -DarchetypeGroupId=org.apache.maven.archetypes \
  -DarchetypeArtifactId=maven-archetype-quickstart \
  -DarchetypeVersion=1.0 \
  -DinteractiveMode=false</screen>

      <para>Das Goal generate nimmt die folgenden Parameter:</para>

      <variablelist>
        <varlistentry>
          <term><varname>groupId</varname></term>

          <listitem>
            <para>Die groupId des Projektes welches Sie erzeugen.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>artifactId</varname></term>

          <listitem>
            <para>Die artifactId des Projektes welches Sie erzeugen.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>version</varname></term>

          <listitem>
            <para>Die version des Projektes welches Sie erzeugen (der
            Standardwert ist hierbei auf 1.0-SNAPSHOT gesetzt).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>packageName</varname></term>

          <listitem>
            <para>Der Standard Package Name des Projektes welches Sie erzeugen
            (Standardwert ist der Wert der groupId).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>archetypeGroupId</varname></term>

          <listitem>
            <para>Die groupId des Archetypen welchen Sie zur
            Projektgenerierung benutzen möchten.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>archetypeArtifactId</varname></term>

          <listitem>
            <para>Die artifactId des Archetypen welchen Sie zur
            Projektgenerierung benutzen möchten.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>archetypeVersion</varname></term>

          <listitem>
            <para>Die version des Archetypen welchen Sie zur
            Projektgenerierung benutzen möchten.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>interactiveMode</varname></term>

          <listitem>
            <para>Sollte das Goal generate im interaktiven Modus ausgeführt
            werden, so wird der Benutzer dazu aufgefordert, die zuvor
            genannten Werte einzugeben (Standardwert). Steht interactiveMode
            auf false, so wird das Werkzeug auf die übergebenen Werte
            zurückfallen.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Sollten Sie das Goal generate mit dem zuvor angegebenen Aufruf
      anstossen, so werden Sie ein neues Verzeichnis mit dem Namen quickstart
      und einem darin enthaltenen Maven Projekt erhalten. Zugegebenermassen
      ist der Befehl durch welchen Sie sich bislang kämpfen mussten nicht
      unbedingt einfach, im folgenden Abschnitt werden wir den Aufruf noch
      einmal interaktiv absetzen.</para>
    </section>

    <section id="archtype-sect-generate">
      <title>Einsatz von der Befehlszeile: das Goal generate
      (interactiv)</title>

      <para>Der einfachste Weg, das Maven Archetyp Plugin einzusetzen um ein
      neues Maven Projekt aus einem Artefakten zu erzeugen ist das Goal
      archetyp:generate in interaktivem Modus aufzurufen. Sobald
      interactiveMode auf true gesetzt ist, wird Ihnen das Goal eine Liste der
      verfügbaren Artefakte anzeigen und auf Ihre Eingabe des entsprechenden
      Schlüssels warten. Da der Standardwert des Parameters interactivMode auf
      true gesetzt ist, ist alles was Sie eingeben müssen um den Vorgang
      anzustossen: <command>mvn archtetyp:generate</command>.</para>

      <screen>$ <command>mvn archetype:generate</command>
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [archetype:generate] (aggregator-style)
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] No archetype defined. Using maven-archetype-quickstart
Choose archetype:
1: internal -&gt; appfuse-basic-jsf 
2: internal -&gt; appfuse-basic-spring 
3: internal -&gt; appfuse-basic-struts
4: internal -&gt; appfuse-basic-tapestry
5: internal -&gt; appfuse-core
6: internal -&gt; appfuse-modular-jsf
7: internal -&gt; appfuse-modular-spring
8: internal -&gt; appfuse-modular-struts
9: internal -&gt; appfuse-modular-tapestry
10: internal -&gt; maven-archetype-j2ee-simple
11: internal -&gt; maven-archetype-marmalade-mojo
12: internal -&gt; maven-archetype-mojo
13: internal -&gt; maven-archetype-portlet
14: internal -&gt; maven-archetype-profiles
15: internal -&gt; maven-archetype-quickstart
16: internal -&gt; maven-archetype-site-simple
17: internal -&gt; maven-archetype-site
18: internal -&gt; maven-archetype-webapp
19: internal -&gt; jini-service-archetype
20: internal -&gt; softeu-archetype-seam
21: internal -&gt; softeu-archetype-seam-simple
22: internal -&gt; softeu-archetype-jsf
23: internal -&gt; jpa-maven-archetype
24: internal -&gt; spring-osgi-bundle-archetype
25: internal -&gt; confluence-plugin-archetype
26: internal -&gt; jira-plugin-archetype
27: internal -&gt; maven-archetype-har
28: internal -&gt; maven-archetype-sar
29: internal -&gt; wicket-archetype-quickstart
30: internal -&gt; scala-archetype-simple
31: internal -&gt; lift-archetype-blank
32: internal -&gt; lift-archetype-basic
33: internal -&gt; cocoon-22-archetype-block-plain
34: internal -&gt; cocoon-22-archetype-block
35: internal -&gt; cocoon-22-archetype-webapp
36: internal -&gt; myfaces-archetype-helloworld
37: internal -&gt; myfaces-archetype-helloworld-facelets
38: internal -&gt; myfaces-archetype-trinidad
39: internal -&gt; myfaces-archetype-jsfcomponents
40: internal -&gt; gmaven-archetype-basic
41: internal -&gt; gmaven-archetype-mojo
Choose a number: <command>15 </command></screen>

      <para>Das erste was das Goal archetype:generate im interactiven Modus
      erzeugt ist eine Ausgabe aller Archetypen welche es kennt. Das Maven
      Archtetyp Plugin kommt mit einem Archetypkatalog welcher Verweise auf
      alle einfachen Standardarchetypen (10-18) beinhaltet. Der
      Archetypkatalog des Plugins enthält auch eine Anzahl Verweise auf
      weitere eindrückliche Third Party Archetypen wie zum Beispiel solche zum
      erstellen von AppFuse Projekten, Confluence Projekten, Jira Plugins,
      Wicket Applikationen, Scala Applikationen und sogar Groovy Projekten.
      Für eine kurze Übersicht über die verfügbaren Third Party Archetypen
      verweisen wir auf den Abschnitt <xref
      linkend="archetype-sect-third-party" />.</para>

      <para>Sobald Sie einen Archetypen ausgewählt haben wird das Archetyp
      Plugin den Archetypen herunterladen und Sie daraufhin zur Eingabe der
      folgenden Werte auffordern:</para>

      <itemizedlist>
        <listitem>
          <para><varname>groupId</varname></para>
        </listitem>

        <listitem>
          <para><varname>artifactId</varname></para>
        </listitem>

        <listitem>
          <para><varname>version</varname></para>
        </listitem>

        <listitem>
          <para><varname>package</varname></para>
        </listitem>
      </itemizedlist>

      <screen>[INFO] artifact org.apache.maven.archetypes:maven-archetype-quickstart: checking for updates from central
Downloading: http://repo1.maven.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.0/maven-archetype-quickstart-1.0.jar
4K downloaded
Define value for groupId: : <command>org.sonatype.mavenbook</command>   
Define value for artifactId: : <command>quickstart</command>
Define value for version:  1.0-SNAPSHOT: : <command>1.0-SNAPSHOT</command> 
Define value for package:  org.sonatype.mavenbook: : <command>org.sonatype.mavenbook</command> 
Confirm properties configuration:
groupId: org.sonatype.mavenbook
artifactId: quickstart
version: 1.0-SNAPSHOT
package: org.sonatype.mavenbook
 Y: : <command>Y</command>
</screen>

      <para>Sobald dieser interaktive Ablauf des Goals archetype:generate
      abgeschlossen ist, wird das Maven Archetype Plugin das Projekt, in einem
      Verzeichnis entsprechend der artifactId welche Sie angegeben haben,
      erzeugen.</para>

      <screen>[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating OldArchetype: maven-archetype-quickstart:RELEASE
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.mavenbook
[INFO] Parameter: packageName, Value: org.sonatype.mavenbook
[INFO] Parameter: basedir, Value: /Users/tobrien/tmp
[INFO] Parameter: package, Value: org.sonatype.mavenbook
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: quickstart
[INFO] ********************* End of debug info from resources from generated POM ***********************
[INFO] OldArchetype created in dir: /Users/tobrien/tmp/quickstart
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 minute 57 seconds
[INFO] Finished at: Sun Oct 12 15:39:14 CDT 2008
[INFO] Final Memory: 8M/15M
[INFO] ------------------------------------------------------------------------
</screen>
    </section>

    <section id="archetype-sect-using-m2eclipse">
      <title>Einsatz eines Archetypen in m2eclipse</title>

      <para>m2eclipse, das Maven Eclipse Plugin macht die Erstellung eines
      Projektes aus einem Maven Archetypen sehr einfach, da es einen
      intuitiven Wizard bereitstellt um den Archetypen auszuwählen und zu
      konfigurieren. Bezüglich weiterer Informationen zum Einsatz und Handhabe
      von Maven Archetypen in m2eclipse verweisen wir auf <xref
      linkend="eclipse-sect-m2e-create-archetype" />.</para>
    </section>
  </section>

  <section id="archetype-sect-available">
    <title>Verfügbare Archetypen</title>

    <para>Mit der Verbreitung von Maven werden laufend weitere Archetypen
    veröffentlicht. Dies häufig als einfacher Weg um Benutzern einen schnellen
    Einstieg zu ermöglichen. Projekte werden dann einfach und bequem aus
    bestehenden Projektvorlagen erzeugt. Dieser Abschnitt zielt darauf ab,
    einige der einfachen Standard-Archetypen von Apache Maven vorzustellen,
    sowie einen Überblick über einige interessante Third Party Archetypen zu
    geben. </para>

    <section id="archetype-sect-common-maven">
      <title>Die Standard Maven Archetypen</title>

      <para>Einige der einfachsten Maven Archetypen sind bereits Bestandteil
      der groupId org.apache.maven.archetypes. Die meisten der enthaltenen
      Archetypen sind sehr grundlegende Archetypen welche nur wenige Optionen
      bieten. Sie würden diese nur benutzen, um die allereinfachsten
      Funktionen welche ein Maven Projekt von einem nicht Maven Projekt
      unterscheiden anzuziehen. Das Beispiel des Archetyp webapp, welcher
      weiter unten beschrieben wird, schliesst lediglich eine Rumpf-web.xml
      Datei ein, welche unter \${basedir}/src/main/webapp/WEB-INF abgelegt
      ist. Nicht einmal ein Servlet welches Sie anpassen könnten ist
      Bestandteil des Archetypen. Im Abschnitt <xref
      linkend="archetype-sect-third-party" /> finden Sie einen Kurzüberblick
      über einige der interessanteren Third Party Archetypen wie zum Beispiel
      der AppFuse und Cocoon Archetypen. </para>

      <para>Die folgenden Archetypen sind Bestandteil der groupId
      org.apache.maven.archetypes: </para>

      <section id="archetype-sect-quickstart">
        <title>maven-archetype-quickstart</title>

        <para>Der Archetyp quickstart ist ein einfaches Projekt vom
        Paketierungstyp <acronym>JAR</acronym> und einer einfachen
        Abhängigkeit zu JUnit. Nach der Generierung des Projektes mittels dem
        Archetyp quickstart werden Sie im Standardpackage eine einzelne Klasse
        namens App mit einer Methode main( ), welche "Hallo World!" ausgibt,
        vorfinden. Ebenfalls vorhanden ist eine einzelne JUnit Test-Klasse mit
        dem Namen AppTest und einer Methode testApp( ) welche einen trivialen
        Unit-Test ausführt. </para>
      </section>

      <section id="archetype-sect-webapp">
        <title>maven-archetype-webapp</title>

        <para>Der Archetyp webapp erstellt ein einfaches Projekt vom
        Paketierungstyp <acronym>WAR</acronym> und einer Abhängigkeit auf
        JUnit. <filename>\${basedir}/src/main/webapp</filename> enthält den
        Rumpf einer einfachen Web-Anwendung: einer JSP-Seite index.jsp und der
        einfachsten möglichen web.xml-Datei. Obwohl dieser Archetyp eine
        Abhängigkeit zu JUnit in sich birgt wird keine JUnit Testklasse
        erstellt. Sollten Sie sich nach einer funktionierenden Web-Anwendung
        umgesehen haben, so werden Sie von diesem Artefakten entäuscht werden.
        Der Abschnitt <xref linkend="archetype-sect-third-party" /> bietet
        Ihnen hierzu nützliche Alternativen. </para>
      </section>

      <section id="archetype-sect-mojo">
        <title>maven-archetype-mojo</title>

        <para>Der Archetyp mojo erstellt ein einfaches Projekt vom
        Paketierungstyp maven-plugin und einer einfachen mojo-Klasse mit dem
        Namen MyMojo innerhalb des Standard-Packages. Die Klasse MyMojo
        beinhaltet ein Goal touch welches an die Phase process-resources
        gebunden ist. Dieses erstellt eine Datei touch.txt im Verzeichnis
        target des neuen Projektes, sollte dieses ausgeführt werden. Das neue
        Projekt ist abhängig vom Maven-Plugin-API sowie von JUnit. </para>
      </section>
    </section>

    <section id="archetype-sect-third-party">
      <title>Verbreitete Third-Party Archetypen</title>

      <para>Dieser Abschnitt soll Ihnen einen groben Überblick über die von
      Third Parties zur Verfügung gestellten Archetypen geben. Diese sind
      nicht direkt Teil des Apache Maven Projekt. Sollten Sie nach einer
      ausführlicheren Liste der verfügbaren Archetypen suchen, so sehen Sie
      sich die Auswahlliste des m2eclipse Eclipse Plugin an. m2eclipse
      unterstützt die Erstellung von Projekten von einer ständig wachsenden
      Anzahl (zuletzt über 80) Projektarchetypen welche eine erstaunliche
      Breite von Projekten und Technologien unterstützen. </para>

      <para><xref linkend="eclipse-sect-m2e-create-archetype" /> gibt eine
      Liste der Archetypen welche Ihnen direkt zum Einsatz mit m2eclipse zur
      Verfügung stehen. Die in diesem Abschnitt wiedergegebenen Archetypen
      entsprechen der Standardausgabe der Archetypen welche bei der
      interaktiven Ausführung des Goal generate erzeugt wird. </para>

      <section id="archetype-sect-appfuse">
        <title>AppFuse</title>

        <para>AppFuse ist ein Anwendungsframework welches von Matt Raible
        entwickelt wurde. Stellen Sie sich AppFuse als Rosetta-Stein über eine
        Anzahl wichtiger Java Technologien hinweg vor: Spring Framework,
        Hibernate und iBatis. Der Einsatz von AppFuse erlaubt Ihnen in kurzer
        Zeit eine multi-tier End-to-End Anwendung zu erstellen, welche mehrere
        unterschiedliche Front End Anwendungsframeworks unterstützt (Java
        Server Faces/JSF, Struts und Tapestry). Mit der Version 2.0 hat Matt
        Raible angefangen das Framework auf Maven 2 abzustützen, um vom
        fortgeschrittenen Abhäniggkeitsmanagement und den Möglichkeiten der
        Archetypen zu profitieren. AppFuse 2 bietet Ihnen die folgenden
        Archetypen innerhalb der groupId org.appfuse.archetypes:</para>

        <variablelist>
          <varlistentry>
            <term><varname>appfuse-basic-jsf</varname> and
            <varname>appfuse-modular-jsf</varname></term>

            <listitem>
              <para>End-to-End Anwendung welche Java Server Faces/JSF als
              Presentationsschicht benutzt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>appfuse-basic-spring</varname> and
            <varname>appfuse-modular-spring</varname></term>

            <listitem>
              <para>End-to-End Anwendung welche Spring MVC als
              Presentationsschicht benutzt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>appfuse-basic-struts</varname> and
            <varname>appfuse-modular-struts</varname></term>

            <listitem>
              <para>End-to-End Anwendung welche Struts 2 als
              Presentationsschicht benutzt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>appfuse-basic-tapestry</varname> and
            <varname>appfuse-modular-tapestry</varname></term>

            <listitem>
              <para>End-to-End Anwendung welche Tapestry als
              Presentationsschicht benutzt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>appfuse-core</varname></term>

            <listitem>
              <para>Persistenz und Objekt Modell welches keine
              Presentationsschicht benutzt.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Archetypen welche dem appfuse-basic* Muster folgen sind
        vollumfängliche End-to-End Anwendungen in einem einzigen Maven
        Projekt, Archetypen welche dem appfuse-modular-* Muster folgen,
        stellen vollumfängliche End-to-End Anwendungen dar, welche als
        multi-modulare Maven Projekte abgebildet sind. Diese trennen die
        Kern-Persistenz und -Objekt Modell Logik von der der
        Präsentationsschicht. Hier ein Beispiel der Erstellung einer modularen
        Spring MVC Anwendung von der Erstellung des Projektes bis hin zu deren
        Aufruf.</para>

        <screen>$ mvn archetype:generate \
      -DarchetypeArtifactId=appfuse-modular-spring \
      -DarchetypeGroupId=org.appfuse.archetypes \
      -DgroupId=org.sonatype.mavenbook \
      -DartifactId=mod-spring \
      -Dversion=1.0-SNAPSHOT \
      -DinteractiveMode=false[INFO] Scanning for projects...
...
[INFO] [archetype:generate]
[INFO] Generating project in Batch mode
[INFO] Archetype [org.appfuse.archetypes:appfuse-modular-spring:RELEASE] found in catalog internal
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating OldArchetype: appfuse-modular-spring:RELEASE
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.mavenbook
[INFO] Parameter: packageName, Value: org.sonatype.mavenbook
[INFO] Parameter: basedir, Value: /Users/tobrien/tmp
[INFO] Parameter: package, Value: org.sonatype.mavenbook
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: mod-spring
...
[INFO] OldArchetype created in dir: /Users/tobrien/tmp/mod-spring
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
$ cd mod-spring
$ mvn
... (Eine überwältigende Anzahl Ausgaben ... ~5 Minuten) 
$ cd web
$ mvn jetty:run-war
... (Maven Jetty Plugin startet einen Servlet Container auf Port 8080)</screen>

        <para>Ausgehend von der Generierung des Projektes auf der Basis des
        AppFuse Archetyps bis eine vollständige Webanwendung einschliesslich
        Authentisierung und Benutzermanagement-System aufgerufen werden kann
        vergehen alles in allem ungefair 5 Minuten. Hier sehen Sie die wahre
        Kraft welche hinter dem Einsatz von Maven Archetypen als Fundament der
        Anwendungsentwicklung steht. Wir haben hier allerdings den
        Installationsprozess von AppFuse etwas zu sehr vereinfacht, denn wir
        haben den wichtigen Abschnitt des Herunterladens und der Installation
        der MySQL Datenbank ausgelassen, aber auch das ist kein Hexenwerk,
        sollten Sie sich an die ausführliche Anleitung <ulink
        url="http://appfuse.org/display/APF/AppFuse+QuickStart">AppFuse
        Quickstart Documentation</ulink> halten. </para>
      </section>

      <section id="archetype-sect-atlassian">
        <title>Confluence und JIRA Plugins</title>

        <para>Atlassian hat etliche Archetypen erstellt, um interessierten
        Entwicklern die Erstellung von Plugins für die Produkte Confluence
        sowie JIRA zu erleichtern. Dies sind ein Wiki sowie ein Issue Tracking
        Systems welche beide eine weite Akzeptanz in der grossen Gemeinde der
        Open Source Entwickler haben (auch weil Atlassian Open Source
        Projekten freie Lizenzen zur Verfügung stellt). Beide Archetypen, der
        jira-plugin-Archetype sowie der confluence-maven-Archetype sind unter
        der groupId com.atlassian.maven.archetypes zu finden. Beim Erstellen
        eines Confluence Plugins wird der Archetyp eine pom.xml Datei
        erstellen welche die notwendigen Verweise auf Atlassian Repositorien
        und Abhängigkeiten zu Atlassian Artefakten beinhaltet. Das
        resultierende Confluence Plugin wird aus einem einfachen Beispielmacro
        sowei einer Datei atlassian-plugin.xml bestehen. Die Generierung eines
        JIRA Plugins erzeugt ein Projekt mit einer einzigen, leeren MyPlugin
        Klasse und einer entsprechenden atlassian-plugin.xml unter dem
        Verzeichnis
        <filename>\${basedir}/src/main/resources</filename>.</para>

        <para>Weitere Informationen zur Entwicklung von Plugins für Confluence
        mit Maven 2 finden Sie unter <ulink
        url="http://confluence.atlassian.com/display/DISC/Developing+Confluence+Plugins+with+Maven+2">Developing
        Confluence Plugins with Maven 2</ulink> auf dem Confluence Wiki.
        Weitergehende Informationen bezüglich der Entwicklung von JIRA Plugins
        unter Maven 2 finden Sie auf dem Atlassian Developer Network unter
        <ulink
        url="http://confluence.atlassian.com/display/DEVNET/How+to+Build+an+Atlassian+Plugin">How
        to Build and Atlassian Plugin</ulink>.</para>
      </section>

      <section id="archetype-sect-wicket">
        <title>Wicket</title>

        <para>Apache Wicket ist ein Komponenten-orientiertes Web Framework
        welches sich darauf konzentriert den Server-seitigen Zustand einer
        Anzahl Komponenten welche in Java oder <acronym>HTML</acronym>
        geschrieben sind zu verwalten. Wo ein Framework wie Spring oder Ruby
        on Rails sich darauf konzentriert Objekte innerhalb eines Aufrufes mit
        einer Anzahl von Seitenvorlagen zu verknüpfen, konzentriert sich
        Wicket sehr stark auf das Einfangen von Interaktionen und
        Seitenstrukturen in einer Anzahl <acronym>POJO</acronym> Java Klassen.
        In einem Zeitalter in welchem Hype getriebene Medienveröffentlichungen
        den "Tod von Java" verbreiten, setzt Wicket auf den entgegengesetzten
        Ansatz von Design und Zusammenstellung von Webanwendungen. Um ein
        Wicket Projekt mittels einem Maven Archetyp zu erstellen geben Sie den
        folgenden Befehl ein:</para>

        <screen>$ <command>mvn archetype:generate</command>
... (select the "wicket-archetype-quickstart" artifact from the interactive menu) ...
... (supply a groupId, artifactId, version, package) ...
... (assuming the artifactId is "ex-wicket") ...
$ <command>cd ex-wicket</command>
$ <command>mvn install</command>
... (a lot of Maven activity) ...
$ <command>mvn jetty:run</command>
... (Jetty will start listening on port 8080) ...</screen>

        <para>Wie bereits beim Archetypen AppFuse wird eine Rumpf Webanwendung
        erstellt, welche direkt mittels dem Maven Jetty Plugin ausgeführt
        werden kann. Sollten Sie also <ulink
        url="http://localhost:8080/ex-wicket">http://localhost:8080/ex-wicket</ulink>
        eingeben, so werden Sie die neuerstellte Anwendung in im Servlet
        Container ansehen. </para>

        <note>
          <para>Vergleichen Sie einmal die Stärke der Maven Archetypen mit dem
          Copy und Paste Ansatz der die vergangenen Jahre der Web-Entwicklung
          gekennzeichnet hat. Vor sechs Jahren, ohne den Vorteil von so etwas
          wie dem Maven Archetyp Plugin, hätten Sie sich durch ein Buch über
          AppFuse oder Wicket durchkämpfen und sich mit den Einzelheiten des
          Frameworks befassen müssen vor Sie je dazu gekommen wären das erste
          Mal den Servlet Container aufzustarten. Alternativ konnten Sie
          natürlich auch ein bestehendes Projekt kopieren und entsprechend
          anpassen. Mit Hilfe der Maven Archetype Plugins ist es nun
          Framework-Entwicklern möglich vorgefertigte Rumpfanwendungen innert
          Minutenfrist bereitzustellen. Das ist eine so grundlegende Änderung
          welche erst noch die Enterprise-Anwendungsentwicklung erfassen muss,
          und daher können Sie erwarten, dass aus den derzeitigen wenigen
          Archetypen in kurzer Zeit duzende oder hunderte Archetypen werden.
          </para>
        </note>
      </section>
    </section>
  </section>

  <section id="archetype-sect-publishing">
    <title>Veröffentlichen von Archetypen</title>

    <para>Sobald Sie nun einen sinnvollen Satz von Archetypen erstellt haben,
    werden Sie diese bestimmt auch mit weiteren Entwicklern teilen wollen. Um
    dies zu tun, müssen Sie einen Archetypkatalog erstellen. Ein
    Archetypkatalog ist eine XML-Datei welche das Maven Archetyp Plugin
    auslesen kann um Archetypen im Repository zu finden. So zeigt <xref
    linkend="archetypes-cocoon-catalog" /> den Archetypkatalog des Apache
    Cocoon Projekt welcher unter <ulink
    url="http://cocoon.apache.org/archetype-catalog.xml">http://cocoon.apache.org/archetype-catalog.xml</ulink>
    zu finden ist. </para>

    <example id="archetypes-cocoon-catalog">
      <title>Archetype Katalog des Apache Cocoon Projektes</title>

      <para><programlisting>&lt;archetype-catalog&gt;
  &lt;archetypes&gt;
    &lt;archetype&gt;
      &lt;groupId&gt;org.apache.cocoon&lt;/groupId&gt;
      &lt;artifactId&gt;cocoon-22-archetype-block-plain&lt;/artifactId&gt;
      &lt;version&gt;1.0.0&lt;/version&gt;
      &lt;description&gt;Creates an empty Cocoon block; useful if you want to add another block to a Cocoon application&lt;/description&gt;

    &lt;/archetype&gt;
    &lt;archetype&gt;
      &lt;groupId&gt;org.apache.cocoon&lt;/groupId&gt;
      &lt;artifactId&gt;cocoon-22-archetype-block&lt;/artifactId&gt;
      &lt;version&gt;1.0.0&lt;/version&gt;
      &lt;description&gt;Creates a Cocoon block containing some small samples&lt;/description&gt;
    &lt;/archetype&gt;

    &lt;archetype&gt;
      &lt;groupId&gt;org.apache.cocoon&lt;/groupId&gt;
      &lt;artifactId&gt;cocoon-22-archetype-webapp&lt;/artifactId&gt;
      &lt;version&gt;1.0.0&lt;/version&gt;
      &lt;description&gt;Creates a web application configured to host Cocoon blocks. Just add the block dependencies&lt;/description&gt;
    &lt;/archetype&gt;
  &lt;/archetypes&gt;

&lt;/archetype-catalog&gt;</programlisting></para>

      <para>Um einen solche Katalog zu erstellen ist es notwendig das Maven
      Repository zu durchforsten um diese Datei zu erstellen. Um Sie zu
      unterstützen hat das Archetyp Plugin ein Goal crawl um genau dies zu
      tun. Dieses geht davon aus, dass es Zugriffsrechte zum Dateisystem des
      entsprechenden Repositories hat. Sollten Sie das Goal archetyp:crawl
      ohne weitere Argumente von der Befehlszeile aufrufen wird das Archetyp
      Plugin Ihr lokales Repository nach Archetypen durchsuchen und wird einen
      Archetypkatalog erstellen. Dieser wird als archetyp-catalog.xml im
      Verzeichnis <filename>~/.m2/repository</filename> abgelegt. </para>

      <screen>[tobrien@MACBOOK repository]$ mvn archetype:crawl
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [archetype:crawl] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [archetype:crawl]
repository /Users/tobrien/.m2/repository
catalogFile null
[INFO] Scanning /Users/tobrien/.m2/repository/ant/ant/1.5/ant-1.5.jar
[INFO] Scanning /Users/tobrien/.m2/repository/ant/ant/1.5.1/ant-1.5.1.jar
[INFO] Scanning /Users/tobrien/.m2/repository/ant/ant/1.6/ant-1.6.jar
[INFO] Scanning /Users/tobrien/.m2/repository/ant/ant/1.6.5/ant-1.6.5.jar
...
[INFO] Scanning /Users/tobrien/.m2/repository/xmlrpc/xmlrpc/1.2-b1/xmlrpc-1.2-b1.jar
[INFO] Scanning /Users/tobrien/.m2/repository/xom/xom/1.0/xom-1.0.jar
[INFO] Scanning /Users/tobrien/.m2/repository/xom/xom/1.0b3/xom-1.0b3.jar
[INFO] Scanning /Users/tobrien/.m2/repository/xpp3/xpp3_min/1.1.3.4.O/xpp3_min-1.1.3.4.O.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 31 seconds
[INFO] Finished at: Sun Oct 12 16:06:07 CDT 2008
[INFO] Final Memory: 6M/12M
[INFO] ------------------------------------------------------------------------
</screen>

      <para>Im Fall, dass Sie Interesse daran haben einen Archetypkatalog zu
      erstellen, so ist dies gewöhnlich da Sie ein Open Source Projekt
      unterstützen oder in einer Organisation arbeiten welche einen Satz
      Archetypen anbietet. Normalerweise stehen diese Archetypen bereits im
      Repository bereit und Sie müssen lediglich den Katalog erstellen. In
      anderen Worten Sie müssen ein entsprechendes Verzeichnis in Ihrem
      lokalen Repository durchlaufen und im Wurzelverzeichnis einen
      Archetypkatalog erstellen. Um dies zu tun werden Sie den Katalog sowie
      die Repository Parameter and das Goal archetype:crawl übergeben. </para>

      <para>Der folgende Befehl geht davon aus, dass Sie versuchen einen
      Katalog des unter <filename>/var/www/html/maven2</filename> abgelegten
      Repositories in der Datei
      <filename>/var/www/html/archetype-catalog.xml</filename> zu erstellen.
      </para>

      <screen>$ mvn archetype:crawl -Dcatalog=/var/www/html/archetype-catalog.xml \
                      [INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [archetype:crawl] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [archetype:crawl]
repository /Users/tobrien/tmp/maven2
catalogFile /Users/tobrien/tmp/blah.xml
[INFO] Scanning /Users/tobrien/tmp/maven2/com/discursive/cas/extend/cas-extend-client-java/2.1.1/cas-extend-client-java-2.1.1.jar
[INFO] Scanning /Users/tobrien/tmp/maven2/com/discursive/cas/extend/cas-extend-client-java/2.2/cas-extend-client-java-2.2.jar
-Drepository=/var/www/html/maven2
...</screen>
    </example>
  </section>
</chapter>
