<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="optimizing">
  <title>Optimierung und Überarbeitung der POMs</title>

  <section id="optimizing-sect-intro">
    <title>Einführung</title>

    <para>In <xref linkend="multimodule-web-spring" /> (Kapitel 7:
    "Multi-Modul Enterprise Projekt"), zeigten wir auf, wie die verschiedenen
    Teile eines Maven Builds zusammenkommen, um eine voll funktionsfähige
    multi modularre Anwendung zu erstellen. Während das Beispiel des Kapitels
    eine wirklichkeitsnahe Anwendung wiederspiegelt - eine Anwendung mit
    Datenbankintegration, einem Web-Service, und sogar zwei Benutzer
    Schnittstellen: eine in Form einer Web-Anwendung, und eine als
    Dienstprogramm; so bleibt das Beispiel-Projekt des Kapitels letztendlich
    ein konstruiertes. Um die Komplexität eines realen Projektes abzubilden
    bräuchte es ein Buch von weit grösserem Umfang als das, das Sie gerade
    lesen. Anwendungen des täglichen Lebens entwickeln sich im Laufe der Jahre
    und werden oftmals von großen, unterschiedlichen Gruppen von Entwicklern
    gewartet, welche jeweils ganz verschiedene Schwerpunkte setzen. In einem
    solchen Projekt, müssen Sie häufig Entscheidungen und Designs
    gegeneinander abwägen, welche jemand anderes getätigt hat. In diesem
    Kapitel treten wir nun einen Schritt zurück von den Beispielen, aus <xref
    linkend="part-example" /> (Teil I: Maven by Example), und stellen uns die
    Frage, ob es irgendwelche Optimierungen gibt, welche jetzt, wo wir mehr
    über Maven wissen, Sinn machen. Maven ist ein vielfältiges Werkzeug,
    welches so einfach oder auch komplex sein kann, wie Sie es gerade
    benötigen. Aus diesem Grund gibt es oft viele verschiedene Möglichkeiten,
    um die gleiche Aufgabe zu bewerkstelligen, und oft gibt es keinen einzigen
    "richtigen" Weg bei der Konfiguration Ihres Maven-Projektes.</para>

    <para>Bitte verstehen Sie den letzten Satz nicht falsch. Versuchen Sie nun
    nicht mit Maven etwas zu lösen, für das Maven nicht konzipiert wurde! Auch
    wenn Maven eine Vielfalt verschiedener Ansätze unterstützt, gibt es
    natürlich den "<emphasis>Maven Way</emphasis>", und Sie werden mit Maven
    produktiver sein wenn Sie diesen einschlagen. Das Ziel diesen Kapitels ist
    es, einige der Optimierungen weiterzugeben, welche Sie auch auf ein
    bestehendes Maven-Projekt anwenden können. Warum haben wir nicht gleich
    ein optimiertes <acronym>POM</acronym> eingeführt, warum der Umweg?
    <acronym>POM</acronym>s pädagogisch sinnvoll zu gestalten, und
    <acronym>POM</acronym>s in der Praxis effizient zu gestalten, sind zwei
    sehr unterschiedliche Anforderungen. Zwar ist es sicherlich sehr viel
    einfacher, eine bestimmte Einstellung in Ihrem Profil in der
    <filename>~/.m2/settings.xml</filename> zu definieren, als deren
    Einbindung in der <filename>pom.xml</filename> Datei, aber wenn man ein
    Buch schreibt damit dieses gelesen wird, geht es auch meist darum das
    Tempo richtig zu wählen und dafür zu sorgen, dass nicht Konzepte
    eingeführt werden, bevor Sie dazu bereit sind. In <xref
    linkend="part-example" /> (Teil I: Maven by Example), haben wir uns grosse
    Mühe gegeben, den Leser nicht mit zu viel Information zu überlasten, und
    haben darum einige grundlegende Konzepte wie das des Elements
    dependencyManagement bewusst übersprungen. Dieses Element wird nun in
    diesem Kapitel eingeführt.</para>

    <para>Im <xref linkend="part-example" /> (Teil I: "Maven by Example")
    dieses Buches gibt es Beispiele, in welchen die Autoren eine Abkürzung
    gewählt haben, oder über ein wichtiges Detail grosszügig hinweggeschritten
    sind, einfach um Sie zügig zu den Kernpunkten des Kapitels weiterzuleiten.
    Sie konnten lernen wie man ein Maven Projekt aufsetzt, kompiliert und
    installiert, ohne dass Sie durch hunderte Seiten Detailspezifikation waten
    mussten, welche jeden letzten Schalter erklärte, der Ihnen zur Verfügung
    gestanden hätte. Wir haben diesen Weg bewusst gewählt, da es uns wichtig
    schien, den neuen Maven Benutzer schnell zu einem Ergebnis zu führen,
    statt Ihn auf einem langen mäandernden Weg zu begleiten, welcher uns durch
    eine schier endlos erscheinende Weite führt. Sobald Sie damit begonnen
    haben, selbst regelmässig Maven einzusetzen, sollten Sie wissen, wie man
    eigene Projekte und <acronym>POM</acronym>s analysiert. In diesem Kapitel
    treten wir nun einen Schritt zurück, und werfen einen Blick auf das was
    wir zum Abschlus von <xref linkend="multimodule-web-spring" /> (Kapitel 7:
    "Multi-Modul Enterprise Projekt") tatsächlich bekommen haben.</para>
  </section>

  <section id="optimizing-sect-pom-cleanup">
    <title>POM Bereinigung</title>

    <para>Die Optimierung eines multi-modularen <acronym>POM</acronym>s wird
    am besten in mehreren Phasen durchgeführt, denn es gilt sich auf
    unterschiedliche Bereiche zu konzentrieren. Im Normalfall suchen wir nach
    Wiederholungen innerhalb eines <acronym>POM</acronym> und über dessen
    Geschwister-POMs hinweg. Wenn Sie am Anfang stehen, oder wenn sich ein
    Projekt noch immer sehr schnell entwickelt, es ist akzeptabel, einige
    Abhängigkeiten und Plugin-Konfigurationen hier und da zu duplizieren, aber
    so wie das Projekt reift und die Anzahl der Module sich erhöht, sollten
    Sie sich Zeit nehmen um die gemeinsamen Abhängigkeiten sowie Plugin
    Konfigurationen zu refaktorieren/überarbeiten. Die Erstellung effizienter
    <acronym>POM</acronym>s trägt Sie ein grosses Stück des Weges, die
    Komplexität Ihres Projekts zu verwalten während dieses noch immer wächst.
    Wo immer Verdopplungen von Informationen auftauchen können Sie davon
    ausgehen, dass es in der Regel einen besseren Weg gibt.</para>
  </section>

  <section id="optimizing-sect-dependencies">
    <title>Optimirung der Abhängigkeiten</title>

    <para>Wenn Sie einen Blick in die verschiedenen <acronym>POM</acronym>s in
    <xref linkend="multimodule-web-spring" /> (Kapitel 7: "Multi-Modul
    Enterprise Projekt") werfen, beachten Sie mehrere bestehende Muster der
    Replikation/Wiederholung. Das erste Muster, das wir sehen können ist, dass
    einige Abhängigkeiten wie <varname>Spring</varname> und
    <varname>Hibernate-Annotations</varname> in mehreren Modulen definiert
    werden. Die <varname>Hibernate</varname> Abhängigkeit hat in jeder
    Definition die Ausgrenzung von <package>javax.transaction</package>
    repliziert. Das zweite Muster von Wiederholung ist, dass manchmal mehrere
    Abhängigkeiten in einem Zusammenhang stehen und sich die gleiche Version
    teilen. Dies ist häufig der Fall, wenn ein Projekt Release aus mehreren
    eng gekoppelten Komponenten besteht. Sehen Sie sich zum Beispiel die
    Abhängigkeiten der <varname>Hibernate-Annotations</varname> sowie der
    <varname>Hibernate-Commons-Annotations</varname> an: beide tragen als
    Version <varname>3.3.0.ga</varname>, und wir können davon ausgehen, dass
    die Version der beiden Abhängigkeiten sich auch in Zukunft im
    Gleichschritt bewegen wird. Sowohl die
    <varname>Hibernate-Annotations</varname> wie auch
    <varname>Hibernate-Commons-Annotations</varname> sind Komponenten des
    gleichen Projekts, freigegeben von JBoss. Wann immer es einen neuen
    Projekt Release gibt, werden diese beiden Abhängigkeiten sich ändern. Das
    letzte Muster der Replikation ist die Wiederholung der Geschwister-Modul
    Abhängigkeiten und Geschwister-Modul-Versionen. Maven bietet einfache
    Mechanismen, mit denen Sie alle Fälle von Duplikation in das Top Level POM
    (Parent POM) ziehen können.</para>

    <para>Ein kleine Diskrepanz der Version einer Abhängigkeit eines Projektes
    bezüglich eines Bytecode-Manipulations Bibliothek mit dem Namen
    <acronym>ASM</acronym>, drei Ebenen tiefer in der Projekt-Hierarchie,
    führt leicht zur vollständigen Blockade einer Web-Applikation, welche von
    einer ganz anderen Gruppe von Entwicklern bearbeitet wird, und von diesem
    speziellen Modul abhängig ist. Unit-Tests bestehen, da diese gegen eine
    Version der Abhängigkeit testen, und scheitern fürchterlich in der
    Produktion, in welcher - in einem WAR-Archive gebündelt - eine ganz andere
    Version dieser Abhängigkeit vorliegt. Sollten Sie Dutzende von Projekten
    am Laufen haben, welche alle mit etwas wie <varname>Hibernate
    Annotations</varname> arbeiten und deren Deklaration sich ständig
    wiederholt und dupliziert, mit allen Abhängigkeiten und Ausschlüssen, so
    wird die durchschnittliche Zeit zwischen grossen Build Fehlern eher klein
    sein. So wie Ihre Maven Projekte immer weiter wachsen und komplexer
    werden, werden Ihre Listen von Abhängigkeiten wachsen; und Sie werden
    nicht umhinkommen, Versionen und Deklarationen Ihrer Abhängigkeiten in
    Ihrem Top Level POM zu konsolidieren.</para>

    <para>Die Wiederholung von Geschwister-Modul-Versionen bereiten das Feld
    für einen besonders fieses Problem, welches zwar nicht direkt durch Maven
    verschuldet wird, aber dessen man sich erst bewusst wird, nachdem Sie ein
    paar Mal von diesem Fehler gebissen wurden. So Sie das Maven Release
    Plugin benutzen, ist die Verwaltung der Geschwister Versionen und deren
    Abhängigkeiten kein Thema, Versionen werden jeweils automatisch
    aktualisiert. Wenn <varname>Simple Web Version 1.3-Snapshot</varname> von
    <varname>Simple Persist Version 1.3-Snapshot abhängig</varname> ist, und
    Sie geben beide Module in der <varname>Version 1.3</varname> frei, so ist
    das Maven Release-Plugin schlau genug, um die Versionen innerhalb Ihrer
    gesamten multi-modularen Projekt POMs automatisch anzupassen. Wenn Sie die
    Freigabe mittels dem Release-Plugin vornehmen werden automatisch alle
    Versionen in Ihrem Build auf <varname>1.4-Snapshot</varname> hochgezählt
    und das Release-Plugin wird darüber hinaus allen Code in das Repository
    einchecken. Ein großes multi-modulares Projekt freizugeben könnte also
    nicht einfacher sein, bis ...</para>

    <para>Probleme treten auf, wenn Entwickler Änderungen am
    <acronym>POM</acronym> einfliessen lassen, und sich in eine laufende
    Freigabe einmischen. Oftmals fügt ein Entwickler im Konfliktfall zwei
    Abhängigkeiten zusammen, oder agiert falsch im Fall eines Modul Konflikts,
    so dass er unwissentlich auf eine frühere Version zurückrollt. Da die
    aufeinander folgenden Versionen der Abhängigkeit gewöhnlich kompatibel
    sind, zeigt sich dies nicht, wenn der Entwickler seinen Build erstellt,
    und es zeigt sich ebenso wenig in einem Continuous Integration
    Build-System. Stellen Sie sich einen sehr komplexen Build vor, der Trunk
    besteht aus Komponenten des <varname>1.4-Snapshot</varname>, und jetzt
    müssen Sie sich vorstellen, dass Entwickler A eine Komponente tief in der
    Hierarchie des Projekts aktualisiert, welche von der Version
    <varname>1.3-Snapshot</varname> der Komponente B abhängt. Obwohl die
    meisten Entwickler bereits auf <varname>Version 1.4-Snapshot
    </varname>bauen, wird es beim Build keinen Fehler geben, solange wie
    <varname>1.3-SNAPSHOT</varname> und <varname>1.4-SNAPSHOT</varname> der
    Komponente B kompatibel sind. Maven wird auch weiterhin den Build auf der
    Basis der <varname>1.3-SNAPSHOT</varname>-Version von Komponente B ab dem
    lokalen Repository des Entwicklers durchführen. Alles scheint ganz
    reibungslos zu funktionieren, der Build des Projektes läuft durch, der
    Continuous Integration Build funktioniert ebenfalls, ein paar esoterische
    Fehler im Zusammenhang mit der Komponente B, aber diese werden auf das
    Werk hinterlistiger Kobolde abgetan. Mittlerweile pumpt eine Pumpe im
    Reaktor Raum und baut stetig Druck auf, bis schliesslich etwas bricht
    ...</para>

    <para>Jemand, nennen wir ihn Herr Unachtsam, hatte beim Zusammenführen
    einen Konflikt in Komponente A, um diesen zu lösen, wurde
    irrtümlicherweise die Abhängigkeit von Komponente A auf Komponente B
    Version <varname>1.3-SNAPSHOT</varname> gekoppelt, während der Rest des
    Projekts stets weiter marschiert. Ein Gruppe Entwickler haben die ganze
    Zeit versucht, den Fehler in Komponente B zu beheben, und diese stehen vor
    einem Rätsel, warum Ihnen dies offenbar in der Produktion nicht gelingt.
    Schließlich befasst sich jemand mit Komponente A und realisiert, dass die
    Abhängigkeit auf die falsche Version zeigt. Es bleibt zu hoffen, dass der
    Fehler nicht groß genug war, um Geld oder Leben zu kosten, aber Herr
    Unachtsam ist beschämt, und seine Kollegen vertrauen ihm ein bisschen
    weniger als vor der ganzen Abhängigkeits-Sache. (Ich hoffe zwar, dass Herr
    Unachtsam realisiert, dass es sich hier um einen Benutzerfehler handelt,
    und das Maven nicht Schuld war. Leider ist es mehr als wahrscheinlich Herr
    Unachtsam startet eine furchtbare Blog-Tirade und beschwert sich endlos
    über Maven, allein schon um sich besser zu fühlen.)</para>

    <para>Glücklicherweise ist die Weiderholung von Abhängigkeiten und die
    Unstimmigkeit von Geschwisterversionen einfach vermeidbar. Es braucht nur
    einige kleine Veränderungen. Der erste Schritt ist, alle Abhängigkeiten
    welche in mehr als einem Projekt vorkommen zu finden und diese in das
    darüber stehende <acronym>POM</acronym> im Abschnitt dependencyManagement
    aufzunehmen. Die Geschwister Abhängigkeiten blenden wir für den Moment
    aus. Das <varname>Simple Parent POM</varname> beinhaltet nun die folgenden
    Einträge:</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring&lt;/artifactId&gt;
        &lt;version&gt;2.0.7&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.5&lt;/version&gt;
      &lt;/dependency&gt;  
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
        &lt;version&gt;3.3.0.ga&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
        &lt;version&gt;3.3.0.ga&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
        &lt;version&gt;3.2.5.ga&lt;/version&gt;
        &lt;exclusions&gt;
          &lt;exclusion&gt;
            &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
            &lt;artifactId&gt;jta&lt;/artifactId&gt;
          &lt;/exclusion&gt;
        &lt;/exclusions&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>Sobald die Abhängigkeiten im übergeordneten POM eingetragen sind,
    müssen wir diese Einträge aus den 'Kind'-POM entfernen. Andernfalls werden
    die bestehenden Einträge die des übergeordneten Abschnitts
    dependencyManagement übersteuern. Der Einfachheit halber werden wir hier
    nur das <varname>Simple Model Modul POM</varname> zeigen:</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>Das nächste, das wir angehen sollten, ist die Replikation der
    <varname>Hibernate-Annotations</varname> sowie der
    <varname>Hibernate-Commons-Annotations</varname>, da diese Versionen immer
    übereinstimmen sollten. Wir tun dies, indem wir ein Property mit dem Namen
    <varname>hibernate-annotations-version</varname> erstellen. Der daraus
    resultierende Abschnitt des übergeordneten POM sieht wie folgt aus:</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
  &lt;/properties&gt;

  &lt;dependencyManagement&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
      &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
      &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencyManagement&gt;
  ...
&lt;/project</programlisting>

    <para>Zum Schluss nehmen wir uns noch der Geschwister-Abhängigkeit an.
    Einen Weg welchen wir beschreiten könnten wäre, wie zuvor auch, diese
    Abhängigkeiten nach oben in das übergeordnete POM in den Abschnitt
    dependencyManagement zu verschieben, genau wie die Abhängigkeiten zuvor,
    mit einer definierten Versionen der Geschwister-Projekte im Top-Level
    Projekt POM. Dies ist sicherlich ein gültiges Konzept.</para>

    <para>Allerdings können wir dieses Problem mittles dem Einsatz zweier
    eingebauter Variablen lösen: <varname>\${project.groupId}</varname> und
    <varname>\${project.version}</varname>. Da es sich um Geschwister
    Abhängigkeiten handelt, macht es nicht viel Sinn, einen numerischen Wert
    im übergeordneten POM zu definieren, daher stützen wir uns auf die
    eingebaute Eigenschaft <varname>\${project.version}</varname>. Da alle
    Geschwister derselben Gruppe angehören, können wir weitere
    Zukunftssicherheit einbauen, indem wir auf das bestehende POM mittels der
    Eigenschaft <varname>\${project.groupId}</varname> verweisen. Der Abschnitt
    der Abhängigkeiten des <varname>Simple Command Moduls</varname> sieht nun
    wie folgt aus:</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>Zusammenfassend hier die beiden Optimierungen welche wir angewandt
    haben, um Wiederholungen in der Deklaration der Abhängigkeiten zu
    reduzieren:</para>

    <variablelist>
      <varlistentry>
        <term role="plain"><sgmltag>Ziehen Sie gemeinsame Abhängigkeiten in
        das übergeordnete POM in den Abschnitt dependencyManagement
        </sgmltag></term>

        <listitem>
          <para>Wenn mehr als ein Projekt von einer Abhängigkeit Gebrauch
          macht, können Sie die Abhängigkeit im Element dependencyManagement
          des übergeordneten POM erfassen. Im übergeordneten POM werden
          <varname>Version</varname> und Ausschlüsse gesetzt, in den
          untergeordneten POM müssen sie lediglich die Koordinaten
          <varname>groupId</varname> und <varname>artifactId</varname>
          angeben. Untergeordnete Projekte können die Version sowie die
          Ausschlüsse weglassen, sollte die Abhängigkeit im Element
          <sgmltag>dependencyManagement</sgmltag> deklariert sein.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term role="plain">Benutzen Sie auf die eingebauten Variablen
        '<emphasis>version</emphasis>' und
        '<emphasis>groupId</emphasis>'</term>

        <listitem>
          <para>Um sich auf ein Geschwisterprojekt zu beziehen, verwenden Sie
          <varname>\${project.version}</varname> und
          <varname>\${project.groupId}</varname>. Geschwister-Projekte umfassen
          fast immer die gleiche <varname>groupId</varname> und
          Release-<varname>Version</varname>. Mittels
          <varname>\${project.version}</varname> entschärfen Sie das oben
          aufgeführte Problem der Geschwister-Version Missverhältnisse.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="optimizing-sect-plugins">
    <title>Optimirung der Plugins</title>

    <para>Betrachten wir die verschiedenen Plugin-Konfigurationen, können wir
    sehen, dass die Abhängigkeiten zu <acronym>HSQL DB</acronym> an mehreren
    Orten wiederholt wird. Leider ist das Element
    <sgmltag>dependencyManagement</sgmltag> nicht auf Plugin-Abhängigkeiten
    anwendbar, dennoch können wir ein Property benutzen, um die verschiedenen
    Versionen zu konsolidieren. Tendeziell definieren komplexe multi-modulare
    Maven-Projekte alle <varname>Versionen</varname> im Top-Level-POM. Dieses
    Top-Level-POM wird dann zu einem Dreh-und Angelpunkt bezüglich allen
    Veränderungen, welche Auswirkungen auf das gesamte Projekt haben. Stellen
    Sie sich die Version als Java String in einer Java Klasse vor; bei einer
    ständigen Wiederholung werden Sie wahrscheinlich eine Variable einsetzen
    wollen, damit, wenn es den String zu ändern gilt, Sie dies nur an einem
    Ort durchführen müssen. Das 'Hochziehen' der Version von
    <acronym>HSQLDB</acronym> in ein Property des Top-Level-POM liefert uns
    fogenden Eintrag:</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
  &lt;/properties&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>Das nächste, was wir bemerken ist, dass die
    <varname>Hibernate3-Maven-Plugin-Konfiguration</varname> doppelt, sowohl
    im <varname>Simple Web-</varname> sowie im <varname>Simple Command
    Modul</varname> vorkommt. Entsprechend der Abhängigkeiten können wir die
    Plugin-Konfiguration in der Top-Level-POM Datei genau wie Abhängigkeiten
    im Element <varname>dependencyManagement</varname> definieren. Hierfür
    benutzen wir das Element <varname>pluginManagement</varname> in der Top
    Level POM Datei.</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.1&lt;/version&gt;
          &lt;configuration&gt;
            &lt;components&gt;
              &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
              &lt;/component&gt;
            &lt;/components&gt;
          &lt;/configuration&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;hsqldb&lt;/groupId&gt;
              &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
              &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;
</programlisting>
  </section>

  <section id="optimizing-sect-dependency-plugin">
    <title>Optimierung unter Zuhilfenahmen des Maven Dependency Plugin</title>

    <para>Grössere Projekte, haben eine Tendenz, dass mit wachsender Anzahl
    Abhängigkeiten auch zusätzliche Abhängigkeiten in ein
    <acronym>POM</acronym> einfliessen. Über die Zeit hinweg werden sich die
    Abhängigkeiten verändern, und so werden Sie über kurz oder lang auch
    verwaiste Abhängigkeiten beherbergen, genauso wie Sie Bibliotheken
    anziehen werden, welche nicht deklariert sind. Da Maven 2.x transitive
    Abhängigkeiten im Geltungsbereich des Compilers einschliesst, kann es
    passieren, dass Ihr Projekt zwar fehlerfrei kompiliert, jedoch in der
    Produktion nicht lauffähig ist. Nehmen Sie zum Beispiel ein Projekt
    welches auf eine weit verbreitete Bibliothek wie <varname>Jakarta Commons
    BeanUtils</varname> aufsetzt. Statt diese explizit zu referenzieren,
    verlassen Sie sich auf die transitive Abhängigkeit, da Sie ebenfalls
    <varname>Hibernate</varname> einsetzen, welches diese Library transitiv
    deklariert. Ihr Projekt kompiliert und läuft wie erwartet, bis Sie eines
    Tages <varname>Hibernate</varname> updaten und hierbei auf eine Version
    wechseln, welche nicht mehr auf <varname>BeanUtils</varname> aufbaut.
    Plötzlich bekommen Sie viele Fehler, deren Grund nicht gerade
    offensichtlich ist. Darüber hinaus kann Maven auftretende Konflikte nicht
    lösen, da die Abhängigkeit nicht explizit deklariert wurde.</para>

    <para>Eine bewährte Faustregel ist es, a<emphasis>lle ausdrücklich im Code
    deklarierten Abhängigkeiten explizit zu deklarieren</emphasis>. Wenn Sie
    <varname>Jakarta Commons Beanutils </varname>importieren, so sollten Sie
    diese auch explizit in der pom.xml-Datei festhalten. Glücklicherweise kann
    Ihnen hier Maven helfen, denn durch Bytecode Analyse ist Maven in der
    Lage, solche direkten Abhängigkeiten aufzudecken. Lassen Sie uns das zuvor
    optimierte POM auf Fehler durchleuchten:</para>

    <screen>$ <command>mvn dependency:analyze</command>
[INFO] Scanning for projects...
[INFO] Reactor build order:
[INFO]   Chapter 8 Simple Parent Project
[INFO]   Chapter 8 Simple Object Model
[INFO]   Chapter 8 Simple Weather API
[INFO]   Chapter 8 Simple Persistence API
[INFO]   Chapter 8 Simple Command Line Tool
[INFO]   Chapter 8 Simple Web Application
[INFO]   Chapter 8 Parent Project
[INFO] Searching repository for plugin with prefix: 'dependency'.

...

[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Object Model
[INFO]    task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [dependency:analyze]
[WARNING] Used undeclared dependencies found:
[WARNING]    javax.persistence:persistence-api:jar:1.0:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
[WARNING]    org.hibernate:hibernate:jar:3.2.5.ga:compile
[WARNING]    junit:junit:jar:3.8.1:test

...

[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Web Application
[INFO]    task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] No sources to compile
[INFO] [dependency:analyze]
[WARNING] Used undeclared dependencies found:
[WARNING]    org.sonatype.mavenbook.ch08:simple-model:jar:1.0:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.apache.velocity:velocity:jar:1.5:compile
[WARNING]    javax.servlet:jstl:jar:1.1.2:compile
[WARNING]    taglibs:standard:jar:1.1.2:compile
[WARNING]    junit:junit:jar:3.8.1:test</screen>

    <para>Die vorangegangene, gekürzte Darstellung zeigt die Ausgabe des Goals
    <varname>dependency:analyse</varname>. Dieses Goal analysisert, ob es
    irgendwelche indirekten Abhängigkeiten gibt, oder Abhängigkeiten, welche
    zwar referenziert, aber nicht deklariert werden. Im Projekt
    <varname>Simple Model</varname> zeigt das Plugin beispielhaft auf, wie die
    Abhängigkeit <varname>javax.persistence:persistence-api</varname> eine
    "nicht deklarierte" Abhängigkeit darstellt. Um dies genauer zu
    untersuchen, welchseln Sie in das Verzeichnis des <varname>Simple Model
    Projekt</varname> und rufen dort das Goal
    <varname>dependency:tree</varname> auf. Dies wird Ihnen eine Auflistung
    aller direkten und transitiven Abhängigkeiten ausgeben.</para>

    <screen>$ <command>mvn dependency:tree</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'dependency'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Object Model
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree]
[INFO] org.sonatype.mavenbook.ch08:simple-model:jar:1.0
[INFO] +- org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
[INFO] |  \- javax.persistence:persistence-api:jar:1.0:compile
[INFO] +- org.hibernate:hibernate:jar:3.2.5.ga:compile
[INFO] |  +- net.sf.ehcache:ehcache:jar:1.2.3:compile
[INFO] |  +- commons-logging:commons-logging:jar:1.0.4:compile
[INFO] |  +- asm:asm-attrs:jar:1.5.3:compile
[INFO] |  +- dom4j:dom4j:jar:1.6.1:compile
[INFO] |  +- antlr:antlr:jar:2.7.6:compile
[INFO] |  +- cglib:cglib:jar:2.1_3:compile
[INFO] |  +- asm:asm:jar:1.5.3:compile
[INFO] |  \- commons-collections:commons-collections:jar:2.1.1:compile
[INFO] \- junit:junit:jar:3.8.1:test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
</screen>

    <para>Aus dieser Ausgabe, können wir ablesen, dass das bemängelte
    <varname>persistence-api </varname>durch <varname>Hibernate</varname>
    eingeflossen ist. Ein flüchtiger Scan des Quellcodes aus diesem Modul wird
    uns zeigen dass hier tatsächlich viele direkte Referenzen auf die
    Abhängigkleit <varname>javax.persistence</varname> vorliegen. Die einfache
    Lösung besteht darin einen Verweis auf die Abhängigkeit in das POM
    aufzunehmen. In diesem Beispiel setzen wir die Abhängigkeit zur Version in
    den Abschnitt <varname>dependencyManagement</varname> des
    <acronym>POM</acronym> von <varname>Simple Parent</varname>, da die
    Abhängikeit im Zusammenhang mit <varname>Hibernate</varname> steht, und
    <varname>Hibernate</varname> dort deklariert wird. Irgendwann wird der
    Zeipunkt gekommen sein, und Sie werden die Version von
    <varname>Hibernate</varname> upgraden. Die Nähe der Auflistung des
    <varname>persistence-api</varname> wird es Ihnen dann klarer aufzeigen,
    dass hier eine Abhängigkeit besteht.</para>

    <para>Beim betrachten der Ausgabe von
    <varname>dependency:analyse</varname> des <varname>Simple Web
    Moduls</varname> werden Sie feststellen, dass Sie eine Referenz zum
    <varname>Simple Model</varname> erstellen sollten. Ihr Quellcode in
    <varname>Simple Web</varname> referenziert direkt Objekte aus
    <varname>Simple Model</varname> welches jedoch nur transitiv über
    <varname>Simple Persist</varname> eingebunden ist. Da es sich hier um eine
    Abhängigkeit unter Geschwistern handelt welche beide die gleiche
    <varname>groupId</varname> sowie <varname>version</varname> haben, können
    Sie die Abhängigkeit im <acronym>POM</acronym> von <varname>Simple
    Web</varname> in der Form <varname>\${project.goupId}</varname> und
    <varname>\${project.version}</varname> vornehmen.</para>

    <para>Wie konnte Maven diese Abhängigkeiten überhaupt aufdecken? Woher
    weiss <varname>dependency:analyse</varname> überhaupt welche Klassen und
    andere Abhängigkeiten von Ihrem Bytecode referenziert werden? Das
    Dependency Plugin benutzt den ObjectWeb ASM Toolkit um den Bytecode zu
    analysieren. Mittels ASM durchläuft das Dependency Plugin den gesamten
    Code und erstellt einen Baum aller Klassen welche im aktuellen Projekt
    referenziert werden. Anschliessend durchläuft das Werkzeug alle
    deklarierten und transitiven Abhängigkeiten und steicht alle Klassen
    welche den direkten Abhängigkeiten zugeordnet werden können. Klassen
    welche nicht Teil der direkten Abhängigkeitsliste sind, müssen somit der
    transitiven Abhängigkeitsliste entspringen. Diese können als eingebundene,
    jedoch nicht deklarierte Abhängigkeit (used, undeclared dependencies)
    ausgegeben werden.</para>

    <para>Im Gegensatz dazu ist die Liste der deklarierten, aber nicht
    eingesetzten Abhängigkeiten ungleich schwieriger zu validieren, und weit
    weniger nützlich als die der gebrauchten, nicht
    deklarierternAbhängigkeiten. Zum einen werden manche der Abhängigkeiten
    nur während der Laufzeit oder in Tests angezogen, diese sind im Bytecode
    nicht ersichtlich. Beim Betrachten der Liste wird dies offensichtlich: so
    ist zum Beispiel <varname>JUnit</varname> Teil der Liste, was zu erwarten
    ist, da es nur zum Test eingesetzt wird. Sie werden auch feststellen, dass
    <varname>Velocity </varname>sowie das <varname>Servlet API</varname> auf
    der Liste der Abhängigkeiten des <varname>Simpel Web Moduls</varname>
    erscheint. Das ist nicht weiter verwunderlich, da während das Projekt
    keine direkten Verweise auf die Klassen dieser Artefakte hat, diese nach
    wie vor im laufenden Betrieb unverzichtbar sind.</para>

    <para>Seien Sie vorsichtig mit dem Entfernen unbenutzer, deklarierter
    Abhängigkeiten (unused, declared dependencies), denn ausser Sie haben eine
    sehr gute Testabdeckung fügen Sie hierbei leicht Laufzeitfehler ein. Eine
    noch bösere Überraschung rührt von Bytecode Optimierern her: So ist es zum
    Beispiel legal den Wert einer Konstanten zu ersetzen um damit die
    bestehende Referenz wegzuoptimieren. Die Entfernung dieser Abhängigkeit
    führt jedoch dazu, dass die Kompilierung scheitert, obschon das Tool
    zeigt, dass diese ungenutzt ist. Es ist abzusehen, dass zukünftige
    Versionen des Dependency Maven-Plugin wird verbesserte Techniken zur
    Erkennung solcherlei Problemstellungen bereitstellen werden.</para>

    <para>Es ist zu empfehlen, dass Sie ab und zu
    <varname>dependency:analyse</varname> ausführen, um solcherlei Fehler des
    POM aufzudecken. Das Goal kann derart konfigueriert werden, dass beim
    Auftreten bestimmter Konditionen der Build abbricht, alternativ wird ein
    Report bereitgestellt.</para>
  </section>

  <section id="optimizing-sect-final-poms">
    <title>Abschliessende POMs</title>

    <para>Abschliessend sollen hier nun die endgültigen, optimierten
    pom.xml-Dateien als Referenz für dieses Kapitel widergegeben werden. Hier
    ist das Top-Level POM für <varname>Simple Parent</varname>:</para>

    <example id="ex-final-pom-for-simple-parent">
      <title>Abschliessendes POM des Moduls Simple-Parent</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
  &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;name&gt;Chapter 8 Simple Parent Project&lt;/name&gt;
 
  &lt;modules&gt;
    &lt;module&gt;simple-command&lt;/module&gt;
    &lt;module&gt;simple-model&lt;/module&gt;
    &lt;module&gt;simple-weather&lt;/module&gt;
    &lt;module&gt;simple-persist&lt;/module&gt;
    &lt;module&gt;simple-webapp&lt;/module&gt;
  &lt;/modules&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.1&lt;/version&gt;
          &lt;configuration&gt;
            &lt;components&gt;
              &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
              &lt;/component&gt;
            &lt;/components&gt;
          &lt;/configuration&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;hsqldb&lt;/groupId&gt;
              &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
              &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
  &lt;/properties&gt;
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring&lt;/artifactId&gt;
        &lt;version&gt;2.0.7&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.5&lt;/version&gt;
      &lt;/dependency&gt;  
      &lt;dependency&gt;
        &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
        &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
        &lt;version&gt;1.0&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
        &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
        &lt;version&gt;\${hibernate.annotations.version}&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
        &lt;version&gt;3.2.5.ga&lt;/version&gt;
        &lt;exclusions&gt;
          &lt;exclusion&gt;
            &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
            &lt;artifactId&gt;jta&lt;/artifactId&gt;
          &lt;/exclusion&gt;
        &lt;/exclusions&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;      </programlisting>
    </example>

    <para>The <acronym>POM</acronym> shown in <xref
    linkend="ex-final-pom-for-simple-command" /> captures the<indexterm>
        <primary>simple-command POM (for reference)</primary>
      </indexterm><indexterm>
        <primary>pom.xml file</primary>

        <secondary>final POMs (for reference)</secondary>

        <tertiary>simple-command POM</tertiary>
      </indexterm> <acronym>POM</acronym> for
    <varname>simple-command</varname>, the command-line version of the
    tool.</para>

    <para>Die folgenden POM erfasst das <varname>Simple Command
    Tool</varname>, die Kommando-Zeilen Version des Tools
    (Dienstprogramm).</para>

    <example id="ex-final-pom-for-simple-command">
      <title>Abschliessendes POM des Mouls Simple-Command</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-command&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;name&gt;Chapter 8 Simple Command Line Tool&lt;/name&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;archive&gt;
              &lt;manifest&gt;
                &lt;mainClass&gt;org.sonatype.mavenbook.weather.Main&lt;/mainClass&gt;
                &lt;addClasspath&gt;true&lt;/addClasspath&gt;
              &lt;/manifest&gt;
            &lt;/archive&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
         &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;descriptorRefs&gt;
              &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
            &lt;/descriptorRefs&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
    &lt;/dependency&gt;    
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Darauf folgend das <acronym>POM</acronym> des <varname>Simple Model
    Projekt</varname>. <varname>Simple Model</varname> beinhaltet alle Objekt
    Modelle der gesamten Anwendung.</para>

    <example id="ex-final-pom-for-simple-model">
      <title>Abschlissendes POM des Moduls Simple-Model</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Object Model&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
      &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Im folgenden das <acronym>POM</acronym> des <varname>Simple Persist
    Moduls</varname>. Hierin wird die gesamte Persistenzlogik durch
    <varname>Hibernate</varname> gekapselt.</para>

    <example id="ex-final-pom-for-simple-persist">
      <title>Abschliessendes POM fdes Moduls Simple-Persist</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Persistence API&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.4&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Dann das <varname>Simple Weather Projekt</varname>, das Projekt,
    welches die gesamte Arbeit mit dem Yahoo! Wetter RSS-Feed und dessen
    Analyse zu tun hat. Dieses Projekt ist von <varname>Simple Model</varname>
    abhängig.</para>

    <example id="ex-final-pom-for-simple-weather">
      <title>Abschlissendes POM des Moduls Simple-Weather</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Weather API&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;log4j&lt;/groupId&gt;
      &lt;artifactId&gt;log4j&lt;/artifactId&gt;
      &lt;version&gt;1.2.14&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;dom4j&lt;/groupId&gt;
      &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
      &lt;version&gt;1.6.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;jaxen&lt;/groupId&gt;
      &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
      &lt;version&gt;1.3.2&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Schließlich ist das <varname>Simple Web Projekt</varname>, eine
    Web-Applikation welche die abgerufenen Wettervorhersagen in einer
    <acronym>HSQLDB</acronym> Datenbank speichert, sowie mit <varname>Simple
    Weather</varname> und den daraus bereitgestellten Bibliotheken
    kommuniziert.</para>

    <example id="ex-final-pom-for-simple-webapp">
      <title>Abschliessendes POM des Moduls Simple-Webapp</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;name&gt;Chapter 8 Simple Web Application&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.4&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;\${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;\${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;jstl&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;taglibs&lt;/groupId&gt;
      &lt;artifactId&gt;standard&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
        &lt;version&gt;6.1.9&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;hsqldb&lt;/groupId&gt;
            &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
            &lt;version&gt;\${hsqldb.version}&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</programlisting>
    </example>
  </section>

  <section id="optimizing-sect-conclusion">
    <title>Fazit</title>

    <para>Dieses Kapitel hat aufgezeigt, welche Techniken Ihnen zur
    Verbesserung der Kontrolle Ihrer Abhängigkeiten und Plugins zur Verfügung
    stehen, um Ihre zukünftigen Builds wartungsfreundlich zu gestalten. Wir
    empfehlen in regelmäßigen Abständen der Überprüfung Ihres Builds wie
    aufgezeigt, um sicherzustellen, dass Wiederholungen und damit verbundene
    potenzielle Krisenherde minimiert werden. Wie Ihr Projekt reift, werden
    Sie zwangsläufig neue Abhängigkeiten einführen, oder Sie werden
    feststellen, dass eine Einzelabhängigkeit nun an 10 oder mehr Orten zum
    Einsatz kommt und somit besser höher aufgehängt wird. Die Liste der zum
    Einsatz kommenden bzw. nicht kommenden Abhängigkeiten verändert sich im
    Laufe der Zeit und lässt sich mit dem Dependency Maven Plugin leicht
    bearbeiten.</para>
  </section>
</chapter>
